//todo: Add profiles to the build for dev/integration
//todo: Add jenkins server to LINODE

apply plugin: 'java'
apply plugin: 'scala'
apply plugin: 'war'
apply plugin: 'jetty'
apply plugin: 'idea'
apply plugin: 'flyway'
//apply plugin: 'rebel'

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'org.zeroturnaround:gradle-jrebel-plugin:1.1.2'
        classpath 'com.h2database:h2:1.3.170'
        classpath "com.googlecode.flyway:flyway-gradle-plugin:2.2.1"
    }
}

repositories{
    mavenCentral()
}

dependencies{
    providedCompile "javax.servlet:servlet-api:2.5"
    compile "org.scala-lang:scala-library:2.10.2"
    compile "org.slf4j:slf4j-api:1.7.5"
    compile "ch.qos.logback:logback-classic:1.0.13"
    compile "org.eclipse.jetty.aggregate:jetty-all:7.6.4.v20120524"
    compile "org.apache.commons:commons-lang3:3.1"
    compile "net.minidev:json-smart:1.2"

    compile "com.google.guava:guava:12.0"

    compile "com.sun.jersey:jersey-core:1.17.1"
    compile "com.sun.jersey:jersey-server:1.17.1"
    compile "com.sun.jersey:jersey-servlet:1.17.1"
    compile "com.sun.jersey:jersey-json:1.17.1"
    compile "javax.ws.rs:jsr311-api:1.1.1"

    compile "org.jdbi:jdbi:2.49"

    testCompile "org.hamcrest:hamcrest-all:1.1"
    testCompile "org.apache.httpcomponents:fluent-hc:4.2.1"
    testCompile "org.mockito:mockito-all:1.9.0"
    testCompile "junit:junit:4.11"
    testCompile "org.scalatest:scalatest_2.10:1.9.1"
}

task wrapper(type: Wrapper) {
    gradleVersion = '1.6'
}

sourceSets.main {
    java.srcDirs = []
    scala.srcDir 'src/main/java'
}

flyway {
    url = 'jdbc:h2:file:build/hylyht'
    user = 'sa'
}

//war.dependsOn(generateRebel)

[jettyRun, jettyRunWar,jettyStop]*.stopPort = 8081
[jettyRun, jettyRunWar,jettyStop]*.stopKey = 'stopKey'

test {
    exclude '**/*IT.*'
}

task integrationTest(type:Test, depends:test) {
    include '**/*IT.*'
    doFirst {
        jettyRun.daemon = true
        jettyRun.execute()
    }
    doLast {
        jettyStop.execute()
    }
}

task jsTest(type:Exec) {
    workingDir './src/test/js'

    //on linux
    commandLine 'phantomjs'
    args 'scripts/phantom-js-tests.js', 'SpecRunner.html'

    //extension method stopTomcat.output() can be used to obtain the output:
    ext.output = {
        return standardOutput.toString()
    }
}

test.dependsOn(jsTest)

tasks.withType(ScalaCompile) {
    // use zync-based incremental compiler
    scalaCompileOptions.useAnt = false
}

compileScala {
    scalaCompileOptions.useCompileDaemon = true

    // optionally specify host and port of the daemon:
    scalaCompileOptions.daemonServer = "localhost:4243"
}

task scalaTest(dependsOn: testClasses) << {
    ant.taskdef(name: 'scalatest',
            classname: 'org.scalatest.tools.ScalaTestAntTask',
            classpath: sourceSets.test.runtimeClasspath.asPath
    )
    ant.scalatest(runpath: sourceSets.test.compileClasspath,
            fork: 'false',
            haltonfailure: 'true',
            suite: 'TranslatorTest')
            { reporter(type: 'stdout') }
}
