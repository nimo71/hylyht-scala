apply plugin: 'java'
apply plugin: 'scala'
apply plugin: 'war'
apply plugin: 'jetty'
apply plugin: 'idea'

repositories{
    mavenCentral() 
}

dependencies{
    providedCompile "javax.servlet:servlet-api:2.5"
    compile "org.scala-lang:scala-library:2.10.2"
    compile "org.slf4j:slf4j-api:1.7.5"
    compile "ch.qos.logback:logback-classic:1.0.13"
    compile "com.google.guava:guava:12.0"
    compile "org.eclipse.jetty.aggregate:jetty-all:7.6.4.v20120524"
	compile "org.apache.commons:commons-lang3:3.1"
	compile "com.google.guava:guava:12.0"
	testCompile "org.hamcrest:hamcrest-all:1.1"
	testCompile "org.apache.httpcomponents:fluent-hc:4.2.1"
	testCompile "org.mockito:mockito-all:1.9.0"
    testCompile "junit:junit:4.11"
    testCompile "org.scalatest:scalatest_2.10:1.9.1"
}

task wrapper(type: Wrapper) {
	gradleVersion = '1.6'
}

sourceSets.main {
    java.srcDirs = []
    scala.srcDir 'src/main/java'
}

[jettyRun, jettyRunWar,jettyStop]*.stopPort = 8081
[jettyRun, jettyRunWar,jettyStop]*.stopKey = 'stopKey'
test {
    exclude '**/*IT.*'
}
task integrationTest(type: Test, depends:test) {
    include '**/*IT.*'
    doFirst {
        jettyRun.daemon = true
        jettyRun.execute()
    }
    doLast {
        jettyStop.execute()
    }
}

task jsTest(type:Exec) {
    workingDir './src/test/js'

    //on windows:
//    commandLine 'cmd', '/c', 'mocha-phantomjs TestRunner.html'

    //on linux
    commandLine 'phantomjs'
    args 'scripts/phantom-js-tests.js', 'SpecRunner.html'

    //store the output instead of printing to the console:
//    standardOutput = new ByteArrayOutputStream()

    //extension method stopTomcat.output() can be used to obtain the output:
    ext.output = {
        return standardOutput.toString()
    }
}

